<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>author</key>
	<string>Carsten Blüm</string>
	<key>category</key>
	<string>Copy</string>
	<key>command</key>
	<string>#!/usr/bin/php
&lt;?php

// String used to indicate a linebreak inside a field
$linebreak = '[break]';

// Maximum string length to which each field's content should be truncated.
// Note: This value is changed dynamically, depending on the number of
// columns in the input data. When less than 8, it will increase, for
// 8 it will be exactly $truncatelen and for more than 8, it will
// decrease, but will never be less than half of $truncatelen.
$truncatelen = 40;

// If you get a warning because the MB extension is not available (causing
// this bundle to use strlen() instead of mb_strlen()), you can get rid of
// it be setting the following variable to false.
$warn_if_no_mb = true;


// -------------------- Nothing to change below --------------------

if (function_exists('mb_internal_encoding')) {
	mb_internal_encoding('UTF-8');
	$lenfunc = 'mb_strlen';
	$substrfunc = 'mb_substr';
} else {
	$lenfunc = 'strlen';
	$substrfunc = 'substr';
}

while (false !== $data = fgetcsv(STDIN, 16384, "\t")) {
	if (empty($lines)) {
		$lines = array();
		$count = count($data);
		$truncatelen += round(max(array((8 - $count) * 4, -$truncatelen / 2)));
		$maxlen = array_combine(range(0, $count - 1), array_fill(0, $count, 1));
	}
	for ($i = 0; $i &lt; $count; $i ++) {
		$data[$i] = preg_replace('#[\r↵]+#', $linebreak, $data[$i]);
		if ($truncatelen &lt; $len = $lenfunc($data[$i])) {
			$data[$i] = $substrfunc($data[$i], 0, $truncatelen - 1).'…';
			$maxlen[$i] = $truncatelen;
		} elseif ($maxlen[$i] &lt; $len) {
			$maxlen[$i] = $lenfunc($data[$i]);
		}
	}
 	$lines[] = $data;
}

$linelen = array_sum($maxlen) + (count($maxlen) * 3) + 1;
$result = '';

foreach ($lines as &amp;$line) {
	$result .= str_repeat('-', $linelen)."\n|";
	for ($i = 0; $i &lt; $count; $i ++) {
		// Reminder: We do not use sprintf(), as it's not MB-safe
		$result .= ' '.$line[$i].' ';
		$result .= str_repeat(' ', $maxlen[$i] - $lenfunc($line[$i])).'|';
	}
	$result .= "\n";
}

$result .= str_repeat('-', $linelen)."\n";

$cmd = 'echo '.escapeshellarg($result).' | __CF_USER_TEXT_ENCODING='.posix_getuid().':0x8000100:0x8000100 pbcopy';
shell_exec($cmd);

if ('strlen' == $lenfunc and
    $warn_if_no_mb) {
	$msg = "\nThe “Multibyte” extension is not available in your PHP installation. ".
	       "The simple (not multi-byte safe) string functions have been used instead.\n\n".
	       "If you notice that the truncation of field contents is not accurate, it is for this reason.\n\n".
	       "(To get rid of this warning, you can turn it off in this bundle’s source code using the Bundle Editor.)\n";
	fwrite(STDERR, $msg);
	exit(1);
}
</string>
	<key>contact</key>
	<string>pnefgra@oyhrz.arg</string>
	<key>description</key>
	<string>Creates a text-only table of the result set given as input. PHP variables $linebreak and $truncatelen can be finetuned as needed, see comments in the source.

Output table is UTF8-encoded and should be viewed with a monospaced font.</string>
	<key>input</key>
	<string>selectedtablerowsastab</string>
	<key>keyEquivalent</key>
	<string></string>
	<key>name</key>
	<string>Copy as text table</string>
	<key>output</key>
	<string>none</string>
	<key>scope</key>
	<string>datatable</string>
	<key>tooltip</key>
	<string>Creates a text-only representation of the resultset</string>
	<key>uuid</key>
	<string>14FD94B4-59C0-473E-B742-0330EAA3BB4E</string>
</dict>
</plist>
